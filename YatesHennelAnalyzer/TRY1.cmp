 STRUCTURED PROGRAMMING VERIFICATION WILL USE THE FOLLOWING 10 STRUCTURES
 ------------------------------------------------------------------------

 SIMPLE COLLAPSE                         

 REPEAT                                  

 CASE WITH SKIP                          

 CASE WITHOUT SKIP                       

 WHILE                                   

 IF THEN                                 

 DO WHILE                                

 IF THEN ELSE                            

 WHILE DO (ZERO TRIP)                    

 FOR UNTIL(ZERO TRIP)                    


 THESE STRUCTURES ARE GRAPH THEORETIC BASED AND NEED NOT NECESSARILY BE
 IDENTIFIED WITH SYNTACTIC LANGUAGE CONSTRUCTS.










                                  *****************************************************
                                  *****************************************************
                                  **                                                 **
                                  **                                                 **
                                  **             COMPLEXITY ANALYSIS FOR             **
                                  **                                                 **
                                  **                                                 **
                                  **                 PROCEDURE main                  **
                                  **                                                 **
                                  **                                                 **
                                  *****************************************************
                                  *****************************************************





 LIST OF KNOTS
 -------------

 =======================================================
  FROM   TO    FROM   TO     DOWN-DOWN  UP-DOWN    UP-UP
 =======================================================

    24   46      45   21                   T
    36   41      40   44         T

 -------------------------------------------------------

 TOTAL NUMBER OF KNOTS     =    2

 NUMBER OF DOWN-DOWN KNOTS =    1
 NUMBER OF UP-DOWN KNOTS   =    1
 NUMBER OF UP-UP KNOTS     =    0






 BASIC BLOCK DISPLAY
 -------------------

 =======================================================================================================================
  LINE                                                                                                       BASIC BLOCK
 NUMBER                                                 STATEMENT                                                 NUMBER
 =======================================================================================================================

     9   main()                                                                                                        1
    10   {                                                                                                             1
    11     int                                                                                                         1
    12       i ,                                                                                                       1
    13       j ,                                                                                                       1
    14       k ,                                                                                                       1
    15       match ,                                                                                                   1
    16       ncases ;                                                                                                  1
    17     char *                                                                                                      1
    18       message ;                                                                                                 1
    19     printf ( "Enter number of triangles \n") ;                                                                  1
    20     scanf ( "%d", & ncases ) ;                                                                                  1

 -----------------------------------------------------------------------------------------------------------------------

    21     while                                                                                                       2
    22       (                                                                                                         2
    23       ncases                                                                                                    2
    24       )                                                                                                         2

 -----------------------------------------------------------------------------------------------------------------------

    25       {                                                                                                         3
    26         ncases -- ;                                                                                             3
    27         printf ( "\nEnter sides of triangle\n") ;                                                               3
    28         scanf ( "%d %d %d", & i , & j , & k ) ;                                                                 3
    29         if                                                                                                      3
    30           (                                                                                                     3
    31           i >= j + k                                                                                            3
    32           ||                                                                                                    3

 -----------------------------------------------------------------------------------------------------------------------

    33           j >= k + i                                                                                            4
    34           ||                                                                                                    4

 -----------------------------------------------------------------------------------------------------------------------

    35           k >= i + j                                                                                            5

 -----------------------------------------------------------------------------------------------------------------------

    36           )                                                                                                     6

 -----------------------------------------------------------------------------------------------------------------------

    37           {                                                                                                     7
    38             message = "This is not a triangle";                                                                 7
    39           }                                                                                                     7
    40         else                                                                                                    7

 -----------------------------------------------------------------------------------------------------------------------

    41           {                                                                                                     8
    42             message = "This is a triangle";                                                                     8
    43           }                                                                                                     8

 -----------------------------------------------------------------------------------------------------------------------

    44         printf ( "%d %d %d %20s\n", i , j , k , message ) ;                                                     9
    45       }                                                                                                         9

 -----------------------------------------------------------------------------------------------------------------------

    46   }                                                                                                            10





 AVERAGE LENGTH OF BASIC BLOCK =   2.90 EXECUTABLE LINES


 PROCEDURE ENTRY AT BASIC BLOCK    1

 PROCEDURE EXIT  AT BASIC BLOCK   10





 KNOTS
 -----

 ===============================================================================
  FROM       TO        FROM       TO          FROM       TO        FROM       TO
 BLOCK    BLOCK       BLOCK    BLOCK          LINE     LINE        LINE     LINE
 ===============================================================================

     2       10           9        2            24       46          45       21
     6        8           7        9            36       41          40       44





 NUMBER OF BLOCK CONNECTIONS  =    13
 NUMBER OF BLOCKS             =    10

 COMPLEXITY MEASURE OF MCCABE =     5
 ************************************

 NUMBER OF KNOTS              =     2
 ************************************






 INTERVAL ANALYSIS
 -----------------





 INTERVALS OF ORDER    1
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1
 EXIT BLOCK         1


 HEADER BLOCK       2 ( HEAD OF LOOP )
 INTERVAL BLOCKS    2    3   10    4    5    6    7    8    9
 EXIT BLOCK        10


 NUMBER OF INTERVALS =    2
 AVERAGE LENGTH OF INTERVAL =  5.00 BLOCKS





 INTERVALS OF ORDER    2
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1    2
 EXIT BLOCK         2


 NUMBER OF INTERVALS =    1
 AVERAGE LENGTH OF INTERVAL =  2.00 BLOCKS


 PROCEDURE REDUCIBLE IN THE INTERVAL SENSE
 *****************************************






 STRUCTURED PROGRAMMING VERIFICATION
 -----------------------------------





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2
 BLOCK    2 CONNECTS TO BLOCKS    3   10
 BLOCK    3 CONNECTS TO BLOCKS    4    6
 BLOCK    4 CONNECTS TO BLOCKS    5    6
 BLOCK    5 CONNECTS TO BLOCKS    6
 BLOCK    6 CONNECTS TO BLOCKS    7    8
 BLOCK    7 CONNECTS TO BLOCKS    9
 BLOCK    8 CONNECTS TO BLOCKS    9
 BLOCK    9 CONNECTS TO BLOCKS    2



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES    9 TO   20    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   21 TO   24    -   BLOCK    2
 BLOCK    3 CONTAINS LINES   25 TO   32    -   BLOCK    3
 BLOCK    4 CONTAINS LINES   33 TO   34    -   BLOCK    4
 BLOCK    5 CONTAINS LINES   35 TO   35    -   BLOCK    5
 BLOCK    6 CONTAINS LINES   36 TO   36    -   BLOCK    6
 BLOCK    7 CONTAINS LINES   37 TO   40    -   BLOCK    7
 BLOCK    8 CONTAINS LINES   41 TO   43    -   BLOCK    8
 BLOCK    9 CONTAINS LINES   44 TO   45    -   BLOCK    9
 BLOCK   10 CONTAINS LINES   46 TO   46    -   BLOCK   10





 ----- STRUCTURED CODE FOUND -----

 IF THEN ELSE                            
                      FORMED OF BLOCKS    6    7    8    9
       THE FOLLOWING BLOCKS ARE MERGED    6    7    8

 IF THEN                                 
                      FORMED OF BLOCKS    4    5    6
       THE FOLLOWING BLOCKS ARE MERGED    4    5

 IF THEN                                 
                      FORMED OF BLOCKS    3    4    6
       THE FOLLOWING BLOCKS ARE MERGED    3    4





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2
 BLOCK    2 CONNECTS TO BLOCKS    3   10
 BLOCK    3 CONNECTS TO BLOCKS    6
 BLOCK    6 CONNECTS TO BLOCKS    9
 BLOCK    9 CONNECTS TO BLOCKS    2



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES    9 TO   20    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   21 TO   24    -   BLOCK    2
 BLOCK    3 CONTAINS LINES   25 TO   35    -  BLOCKS    3 TO    5
 BLOCK    6 CONTAINS LINES   36 TO   43    -  BLOCKS    6 TO    8
 BLOCK    9 CONTAINS LINES   44 TO   45    -   BLOCK    9
 BLOCK   10 CONTAINS LINES   46 TO   46    -   BLOCK   10





 ----- STRUCTURED CODE FOUND -----

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    6    9
       THE FOLLOWING BLOCKS ARE MERGED    6    9

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    3    6
       THE FOLLOWING BLOCKS ARE MERGED    3    6

 WHILE                                   
                      FORMED OF BLOCKS    2    3   10
       THE FOLLOWING BLOCKS ARE MERGED    2    3

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1    2
       THE FOLLOWING BLOCKS ARE MERGED    1    2

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1   10
       THE FOLLOWING BLOCKS ARE MERGED    1   10





 STRUCTURE REDUCED TO 1 BLOCK





 ESSENTIAL KNOTS =     0
 ***********************

 ESSENTIAL COMPLEXITY OF MCCABE =    1
 *************************************


 PROCEDURE STRUCTURED
 ********************






 =====================================================================================================================
                  EXECUTABLE     BASIC   AVERAGE   ORDER 1 MAX ORDER                               ESSENTIAL ESSENTIAL
 PROCEDURE             LINES    BLOCKS    LENGTH INTERVALS INTERVALS REDUCIBLE    MCCABE     KNOTS    MCCABE     KNOTS
 =====================================================================================================================

 main                    29        10      2.90         2         2       YES         5         2         1         0

 ---------------------------------------------------------------------------------------------------------------------

 TOTAL FOR PROGRAM       29        10      2.90         2         2       YES         5         2         1         0





 =========================================================
                                           TOTAL MAX DEPTH
 PROCEDURE           ENTRIES     EXITS     LOOPS     LOOPS
 =========================================================

 main                     1         1         1         1

 ---------------------------------------------------------

 TOTAL FOR PROGRAM        1         1         1         1





 THE PROGRAM CONTAINS    1 PROCEDURES


 THE ESSENTIAL MCCABE MEASURE OF 1 INDICATES THAT THE PROGRAM IS WELL STRUCTURED
