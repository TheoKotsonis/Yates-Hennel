 STRUCTURED PROGRAMMING VERIFICATION WILL USE THE FOLLOWING  7 STRUCTURES
 ------------------------------------------------------------------------

 SIMPLE COLLAPSE                         

 REPEAT                                  

 CASE                                    

 WHILE LOOP                              

 IF THEN                                 

 IF THEN ELSE                            

 FOR LOOP                                





                                  *****************************************************
                                  *****************************************************
                                  **                                                 **
                                  **                                                 **
                                  **             COMPLEXITY ANALYSIS FOR             **
                                  **                                                 **
                                  **                                                 **
                                  **                 PROCEDURE *MAIN                 **
                                  **                                                 **
                                  **                                                 **
                                  *****************************************************
                                  *****************************************************





 LIST OF KNOTS
 -------------

 =======================================================
  FROM   TO    FROM   TO     DOWN-DOWN  UP-DOWN    UP-UP
 =======================================================

    28   57      56   26                   T
    37   54      53   35                   T
    42   47      46   52         T

 -------------------------------------------------------

 TOTAL NUMBER OF KNOTS     =    3

 NUMBER OF DOWN-DOWN KNOTS =    1
 NUMBER OF UP-DOWN KNOTS   =    2
 NUMBER OF UP-UP KNOTS     =    0

 BASIC BLOCK DISPLAY
 -------------------

 =======================================================================================================================
  LINE                                                                                                       BASIC BLOCK
 NUMBER                                                 STATEMENT                                                 NUMBER
 =======================================================================================================================

    15  begin                                                                                                          1
    17    for                                                                                                          1
    18       i := 1 to n                                                                                               1
    19    do                                                                                                           1

 -----------------------------------------------------------------------------------------------------------------------

    20     begin                                                                                                       2
    21       writeln ( 'Dwse ton ' , i , ' arithmo:' ) ;                                                               2
    22       readln ( v [ i ] )                                                                                        2
    23     end ;                                                                                                       2

 -----------------------------------------------------------------------------------------------------------------------

    25    gap := n div 2 ;                                                                                             3

 -----------------------------------------------------------------------------------------------------------------------

    26    while                                                                                                        4
    27       ( gap > 0 )                                                                                               4
    28    do                                                                                                           4

 -----------------------------------------------------------------------------------------------------------------------

    29     begin                                                                                                       5
    30       for                                                                                                       5
    31          i := gap + 1 to n                                                                                      5
    32       do                                                                                                        5

 -----------------------------------------------------------------------------------------------------------------------

    33        begin                                                                                                    6
    34          j := i - gap ;                                                                                         6

 -----------------------------------------------------------------------------------------------------------------------

    35          while                                                                                                  7
    36             ( j > 0 )                                                                                           7
    37          do                                                                                                     7

 -----------------------------------------------------------------------------------------------------------------------

    38           begin                                                                                                 8
    39             jg := j + gap ;                                                                                     8
    40             if                                                                                                  8
    41                ( v [ j ] <= v [ jg ] )                                                                          8
    42             then                          { compare}                                                            8

 -----------------------------------------------------------------------------------------------------------------------

    43              BEGIN                                                                                              9
    44                j := 0      {f force loop termination}                                                           9
    45              END                                                                                                9
    46             else                                                                                                9

 -----------------------------------------------------------------------------------------------------------------------

    47              begin                                                                                             10
    48                k := v [ j ] ;   { exchange }                                                                   10
    49                v [ j ] := v [ jg ] ;                                                                           10
    50                v [ jg ] := k                                                                                   10
    51              end ;                                                                                             10

 -----------------------------------------------------------------------------------------------------------------------

    52             j := j - gap                                                                                       11
    53           end                                                                                                  11

 -----------------------------------------------------------------------------------------------------------------------

    54        end ;                                                                                                   12

 -----------------------------------------------------------------------------------------------------------------------

    55       gap := gap div 2                                                                                         13
    56     end                                                                                                        13

 -----------------------------------------------------------------------------------------------------------------------

    57  end .                                                                                                         14





 AVERAGE LENGTH OF BASIC BLOCK =  2.93 EXECUTABLE LINES


 PROCEDURE ENTRY AT BASIC BLOCK    1

 PROCEDURE EXIT  AT BASIC BLOCK   14





 KNOTS
 -----

 ===============================================================================
  FROM       TO        FROM       TO          FROM       TO        FROM       TO
 BLOCK    BLOCK       BLOCK    BLOCK          LINE     LINE        LINE     LINE
 ===============================================================================

     4       14          13        4            28       57          56       26
     7       12          11        7            37       54          53       35
     8       10           9       11            42       47          46       52





 NUMBER OF BLOCK CONNECTIONS  =   20
 NUMBER OF BLOCKS             =   14

 COMPLEXITY MEASURE OF MCCABE =    8
 ***********************************

 NUMBER OF KNOTS              =    3
 ***********************************

 INTERVAL ANALYSIS
 -----------------





 INTERVALS OF ORDER    1
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1
 EXIT BLOCK         1


 HEADER BLOCK       2 ( HEAD OF LOOP )
 INTERVAL BLOCKS    2
 EXIT BLOCK         2


 HEADER BLOCK       3
 INTERVAL BLOCKS    3
 EXIT BLOCK         3


 HEADER BLOCK       4 ( HEAD OF LOOP )
 INTERVAL BLOCKS    4    5   14
 EXIT BLOCK(S)      5   14


 HEADER BLOCK       6 ( HEAD OF LOOP )
 INTERVAL BLOCKS    6
 EXIT BLOCK         6


 HEADER BLOCK       7 ( HEAD OF LOOP )
 INTERVAL BLOCKS    7    8   12    9   10   11
 EXIT BLOCK        12


 HEADER BLOCK      13
 INTERVAL BLOCKS   13
 EXIT BLOCK        13


 NUMBER OF INTERVALS =    7
 AVERAGE LENGTH OF INTERVAL =  2.00 BLOCKS





 INTERVALS OF ORDER    2
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1    2    3
 EXIT BLOCK         3


 HEADER BLOCK       4 ( HEAD OF LOOP )
 INTERVAL BLOCKS    4
 EXIT BLOCK         4


 HEADER BLOCK       6 ( HEAD OF LOOP )
 INTERVAL BLOCKS    6    7
 EXIT BLOCK         7


 HEADER BLOCK      13
 INTERVAL BLOCKS   13
 EXIT BLOCK        13


 NUMBER OF INTERVALS =    4
 AVERAGE LENGTH OF INTERVAL =  1.75 BLOCKS





 INTERVALS OF ORDER    3
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1
 EXIT BLOCK         1


 HEADER BLOCK       4 ( HEAD OF LOOP )
 INTERVAL BLOCKS    4    6   13
 NO EXIT NODES


 NUMBER OF INTERVALS =    2
 AVERAGE LENGTH OF INTERVAL =  2.00 BLOCKS





 INTERVALS OF ORDER    4
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1    4
 EXIT BLOCK         4


 NUMBER OF INTERVALS =    1
 AVERAGE LENGTH OF INTERVAL =  2.00 BLOCKS


 PROCEDURE REDUCIBLE IN THE INTERVAL SENSE
 *****************************************

 STRUCTURED PROGRAMMING VERIFICATION
 -----------------------------------





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2    3
 BLOCK    2 CONNECTS TO BLOCKS    2    3
 BLOCK    3 CONNECTS TO BLOCKS    4
 BLOCK    4 CONNECTS TO BLOCKS    5   14
 BLOCK    5 CONNECTS TO BLOCKS    6   13
 BLOCK    6 CONNECTS TO BLOCKS    7
 BLOCK    7 CONNECTS TO BLOCKS    8   12
 BLOCK    8 CONNECTS TO BLOCKS    9   10
 BLOCK    9 CONNECTS TO BLOCKS   11
 BLOCK   10 CONNECTS TO BLOCKS   11
 BLOCK   11 CONNECTS TO BLOCKS    7
 BLOCK   12 CONNECTS TO BLOCKS    6   13
 BLOCK   13 CONNECTS TO BLOCKS    4



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   15 TO   19    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   20 TO   23    -   BLOCK    2
 BLOCK    3 CONTAINS LINES   25 TO   25    -   BLOCK    3
 BLOCK    4 CONTAINS LINES   26 TO   28    -   BLOCK    4
 BLOCK    5 CONTAINS LINES   29 TO   32    -   BLOCK    5
 BLOCK    6 CONTAINS LINES   33 TO   34    -   BLOCK    6
 BLOCK    7 CONTAINS LINES   35 TO   37    -   BLOCK    7
 BLOCK    8 CONTAINS LINES   38 TO   42    -   BLOCK    8
 BLOCK    9 CONTAINS LINES   43 TO   46    -   BLOCK    9
 BLOCK   10 CONTAINS LINES   47 TO   51    -   BLOCK   10
 BLOCK   11 CONTAINS LINES   52 TO   53    -   BLOCK   11
 BLOCK   12 CONTAINS LINES   54 TO   54    -   BLOCK   12
 BLOCK   13 CONTAINS LINES   55 TO   56    -   BLOCK   13
 BLOCK   14 CONTAINS LINES   57 TO   57    -   BLOCK   14





 ----- STRUCTURED CODE FOUND -----

 IF THEN ELSE                            
                      FORMED OF BLOCKS    8    9   10   11
       THE FOLLOWING BLOCKS ARE MERGED    8    9   10

 FOR LOOP                                
                      FORMED OF BLOCKS    1    2    3
       THE FOLLOWING BLOCKS ARE MERGED    1    2





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    3
 BLOCK    3 CONNECTS TO BLOCKS    4
 BLOCK    4 CONNECTS TO BLOCKS    5   14
 BLOCK    5 CONNECTS TO BLOCKS    6   13
 BLOCK    6 CONNECTS TO BLOCKS    7
 BLOCK    7 CONNECTS TO BLOCKS    8   12
 BLOCK    8 CONNECTS TO BLOCKS   11
 BLOCK   11 CONNECTS TO BLOCKS    7
 BLOCK   12 CONNECTS TO BLOCKS    6   13
 BLOCK   13 CONNECTS TO BLOCKS    4



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   15 TO   23    -  BLOCKS    1 TO    2
 BLOCK    3 CONTAINS LINES   25 TO   25    -   BLOCK    3
 BLOCK    4 CONTAINS LINES   26 TO   28    -   BLOCK    4
 BLOCK    5 CONTAINS LINES   29 TO   32    -   BLOCK    5
 BLOCK    6 CONTAINS LINES   33 TO   34    -   BLOCK    6
 BLOCK    7 CONTAINS LINES   35 TO   37    -   BLOCK    7
 BLOCK    8 CONTAINS LINES   38 TO   51    -  BLOCKS    8 TO   10
 BLOCK   11 CONTAINS LINES   52 TO   53    -   BLOCK   11
 BLOCK   12 CONTAINS LINES   54 TO   54    -   BLOCK   12
 BLOCK   13 CONTAINS LINES   55 TO   56    -   BLOCK   13
 BLOCK   14 CONTAINS LINES   57 TO   57    -   BLOCK   14





 ----- STRUCTURED CODE FOUND -----

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    8   11
       THE FOLLOWING BLOCKS ARE MERGED    8   11

 WHILE LOOP                              
                      FORMED OF BLOCKS    7    8   12
       THE FOLLOWING BLOCKS ARE MERGED    7    8

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    6    7
       THE FOLLOWING BLOCKS ARE MERGED    6    7

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    6   12
       THE FOLLOWING BLOCKS ARE MERGED    6   12

 FOR LOOP                                
                      FORMED OF BLOCKS    5    6   13
       THE FOLLOWING BLOCKS ARE MERGED    5    6

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1    3
       THE FOLLOWING BLOCKS ARE MERGED    1    3





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    4
 BLOCK    4 CONNECTS TO BLOCKS    5   14
 BLOCK    5 CONNECTS TO BLOCKS   13
 BLOCK   13 CONNECTS TO BLOCKS    4



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   15 TO   25    -  BLOCKS    1 TO    3
 BLOCK    4 CONTAINS LINES   26 TO   28    -   BLOCK    4
 BLOCK    5 CONTAINS LINES   29 TO   54    -  BLOCKS    5 TO   12
 BLOCK   13 CONTAINS LINES   55 TO   56    -   BLOCK   13
 BLOCK   14 CONTAINS LINES   57 TO   57    -   BLOCK   14





 ----- STRUCTURED CODE FOUND -----

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    5   13
       THE FOLLOWING BLOCKS ARE MERGED    5   13

 WHILE LOOP                              
                      FORMED OF BLOCKS    4    5   14
       THE FOLLOWING BLOCKS ARE MERGED    4    5

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1    4
       THE FOLLOWING BLOCKS ARE MERGED    1    4

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1   14
       THE FOLLOWING BLOCKS ARE MERGED    1   14





 STRUCTURE REDUCED TO 1 BLOCK





 ESSENTIAL KNOTS =    0
 **********************

 ESSENTIAL COMPLEXITY OF MCCABE =    1
 *************************************


 PROCEDURE STRUCTURED
 ********************

 =====================================================================================================================
                  EXECUTABLE     BASIC   AVERAGE   ORDER 1 MAX ORDER                               ESSENTIAL ESSENTIAL
 PROCEDURE             LINES    BLOCKS    LENGTH INTERVALS INTERVALS REDUCIBLE    MCCABE     KNOTS    MCCABE     KNOTS
 =====================================================================================================================

 *MAIN                   41        14      2.93         7         4       YES         8         3         1         0

 ---------------------------------------------------------------------------------------------------------------------

 TOTAL FOR PROGRAM       41        14      2.93         7         4       YES         8         3         1         0





 =========================================================
                                           TOTAL MAX DEPTH
 PROCEDURE           ENTRIES     EXITS     LOOPS     LOOPS
 =========================================================

 *MAIN                    1         1         4         3

 ---------------------------------------------------------

 TOTAL FOR PROGRAM        1         1         4         3





 THE PROGRAM CONTAINS    1 PROCEDURES


 THE ESSENTIAL MCCABE MEASURE OF 1 INDICATES THAT THE PROGRAM IS WELL STRUCTURED
