 STRUCTURED PROGRAMMING VERIFICATION WILL USE THE FOLLOWING 10 STRUCTURES
 ------------------------------------------------------------------------

 SIMPLE COLLAPSE                         

 REPEAT                                  

 CASE WITH SKIP                          

 CASE WITHOUT SKIP                       

 WHILE                                   

 IF THEN                                 

 DO WHILE                                

 IF THEN ELSE                            

 WHILE DO (ZERO TRIP)                    

 FOR UNTIL(ZERO TRIP)                    


 THESE STRUCTURES ARE GRAPH THEORETIC BASED AND NEED NOT NECESSARILY BE
 IDENTIFIED WITH SYNTACTIC LANGUAGE CONSTRUCTS.










                                  *****************************************************
                                  *****************************************************
                                  **                                                 **
                                  **                                                 **
                                  **             COMPLEXITY ANALYSIS FOR             **
                                  **                                                 **
                                  **                                                 **
                                  **                 PROCEDURE main                  **
                                  **                                                 **
                                  **                                                 **
                                  *****************************************************
                                  *****************************************************





 LIST OF KNOTS
 -------------

 =======================================================
  FROM   TO    FROM   TO     DOWN-DOWN  UP-DOWN    UP-UP
 =======================================================

    26   74      73   23                   T
    38   64      63   35                   T
    43   48      47   51         T
    54   59      58   62         T
    84   89      88   81                   T

 -------------------------------------------------------

 TOTAL NUMBER OF KNOTS     =    5

 NUMBER OF DOWN-DOWN KNOTS =    2
 NUMBER OF UP-DOWN KNOTS   =    3
 NUMBER OF UP-UP KNOTS     =    0






 BASIC BLOCK DISPLAY
 -------------------

 =======================================================================================================================
  LINE                                                                                                       BASIC BLOCK
 NUMBER                                                 STATEMENT                                                 NUMBER
 =======================================================================================================================

    10   main()                                                                                                        1
    11   {                                                                                                             1
    12     int                                                                                                         1
    13       num ,                                                                                                     1
    14       init ;                                                                                                    1
    15     int                                                                                                         1
    16       i ,                                                                                                       1
    17       j ;                                                                                                       1
    18     printf ( "Type a number up to %d ", 20 ) ;                                                                  1
    19     scanf ( "%d", & i ) ;                                                                                       1
    20     init = i ;                                                                                                  1
    21     printf ( "Type a number ") ;                                                                                1
    22     scanf ( "%d", & num ) ;                                                                                     1

 -----------------------------------------------------------------------------------------------------------------------

    23     while                                                                                                       2
    24       (                                                                                                         2
    25       i <= 20                                                                                                   2
    26       )                                                                                                         2

 -----------------------------------------------------------------------------------------------------------------------

    27       {                                                                                                         3
    28         if                                                                                                      3
    29           (                                                                                                     3
    30           num == 10                                                                                             3
    31           )                                                                                                     3

 -----------------------------------------------------------------------------------------------------------------------

    32           {                                                                                                     4
    33             printf ( "Type another number up to %d ", 20 ) ;                                                    4
    34             scanf ( "%d", & j ) ;                                                                               4

 -----------------------------------------------------------------------------------------------------------------------

    35             while                                                                                               5
    36               (                                                                                                 5
    37               j <= 20                                                                                           5
    38               )                                                                                                 5

 -----------------------------------------------------------------------------------------------------------------------

    39               {                                                                                                 6
    40                 if                                                                                              6
    41                   (                                                                                             6
    42                   num < init                                                                                    6
    43                   )                                                                                             6

 -----------------------------------------------------------------------------------------------------------------------

    44                   {                                                                                             7
    45                     num = num + 1 ;                                                                             7
    46                   }                                                                                             7
    47                 else                                                                                            7

 -----------------------------------------------------------------------------------------------------------------------

    48                   {                                                                                             8
    49                     num = num - 1 ;  ;                                                                          8
    50                   }                                                                                             8

 -----------------------------------------------------------------------------------------------------------------------

    51                 if                                                                                              9
    52                   (                                                                                             9
    53                   num == 11                                                                                     9
    54                   )                                                                                             9

 -----------------------------------------------------------------------------------------------------------------------

    55                   {                                                                                            10
    56                     init = 12 ;                                                                                10
    57                   }                                                                                            10
    58                 else                                                                                           10

 -----------------------------------------------------------------------------------------------------------------------

    59                   {                                                                                            11
    60                     init = 1 ;  ;                                                                              11
    61                   }                                                                                            11

 -----------------------------------------------------------------------------------------------------------------------

    62                 j = j + 1 ;                                                                                    12
    63               }                                                                                                12

 -----------------------------------------------------------------------------------------------------------------------

    64           }                                                                                                    13

 -----------------------------------------------------------------------------------------------------------------------

    65         if                                                                                                     14
    66           (                                                                                                    14
    67           num == 15                                                                                            14
    68           )                                                                                                    14

 -----------------------------------------------------------------------------------------------------------------------

    69           {                                                                                                    15
    70             num = num + 3 ;  ;                                                                                 15
    71           }                                                                                                    15

 -----------------------------------------------------------------------------------------------------------------------

    72         i = i + 1 ;                                                                                            16
    73       }                                                                                                        16

 -----------------------------------------------------------------------------------------------------------------------

    74     if                                                                                                         17
    75       (                                                                                                        17
    76       num <= 20                                                                                                17
    77       )                                                                                                        17

 -----------------------------------------------------------------------------------------------------------------------

    78       {                                                                                                        18
    79         printf ( "Type a number up to 20 ") ;                                                                  18
    80         scanf ( "%d", & j ) ;                                                                                  18

 -----------------------------------------------------------------------------------------------------------------------

    81         while                                                                                                  19
    82           (                                                                                                    19
    83           j <= 20                                                                                              19
    84           )                                                                                                    19

 -----------------------------------------------------------------------------------------------------------------------

    85           {                                                                                                    20
    86             num = num + j ;                                                                                    20
    87             j = j + 1 ;                                                                                        20
    88           }                                                                                                    20

 -----------------------------------------------------------------------------------------------------------------------

    89       }                                                                                                        21

 -----------------------------------------------------------------------------------------------------------------------

    90   }                                                                                                            22





 AVERAGE LENGTH OF BASIC BLOCK =   3.36 EXECUTABLE LINES


 PROCEDURE ENTRY AT BASIC BLOCK    1

 PROCEDURE EXIT  AT BASIC BLOCK   22





 KNOTS
 -----

 ===============================================================================
  FROM       TO        FROM       TO          FROM       TO        FROM       TO
 BLOCK    BLOCK       BLOCK    BLOCK          LINE     LINE        LINE     LINE
 ===============================================================================

     2       17          16        2            26       74          73       23
     5       13          12        5            38       64          63       35
     6        8           7        9            43       48          47       51
     9       11          10       12            54       59          58       62
    19       21          20       19            84       89          88       81





 NUMBER OF BLOCK CONNECTIONS  =    29
 NUMBER OF BLOCKS             =    22

 COMPLEXITY MEASURE OF MCCABE =     9
 ************************************

 NUMBER OF KNOTS              =     5
 ************************************






 INTERVAL ANALYSIS
 -----------------





 INTERVALS OF ORDER    1
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1
 EXIT BLOCK         1


 HEADER BLOCK       2 ( HEAD OF LOOP )
 INTERVAL BLOCKS    2    3   17    4   18
 EXIT BLOCK(S)      3   17    4   18


 HEADER BLOCK       5 ( HEAD OF LOOP )
 INTERVAL BLOCKS    5    6   13    7    8    9   10   11   12
 EXIT BLOCK        13


 HEADER BLOCK      14
 INTERVAL BLOCKS   14   15   16
 EXIT BLOCK        16


 HEADER BLOCK      19 ( HEAD OF LOOP )
 INTERVAL BLOCKS   19   20   21
 EXIT BLOCK        21


 HEADER BLOCK      22
 INTERVAL BLOCKS   22
 EXIT BLOCK        22


 NUMBER OF INTERVALS =    6
 AVERAGE LENGTH OF INTERVAL =  3.67 BLOCKS





 INTERVALS OF ORDER    2
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1
 EXIT BLOCK         1


 HEADER BLOCK       2 ( HEAD OF LOOP )
 INTERVAL BLOCKS    2    5   19   14   22
 EXIT BLOCK        22


 NUMBER OF INTERVALS =    2
 AVERAGE LENGTH OF INTERVAL =  3.00 BLOCKS





 INTERVALS OF ORDER    3
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1    2
 EXIT BLOCK         2


 NUMBER OF INTERVALS =    1
 AVERAGE LENGTH OF INTERVAL =  2.00 BLOCKS


 PROCEDURE REDUCIBLE IN THE INTERVAL SENSE
 *****************************************






 STRUCTURED PROGRAMMING VERIFICATION
 -----------------------------------





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2
 BLOCK    2 CONNECTS TO BLOCKS    3   17
 BLOCK    3 CONNECTS TO BLOCKS    4   14
 BLOCK    4 CONNECTS TO BLOCKS    5
 BLOCK    5 CONNECTS TO BLOCKS    6   13
 BLOCK    6 CONNECTS TO BLOCKS    7    8
 BLOCK    7 CONNECTS TO BLOCKS    9
 BLOCK    8 CONNECTS TO BLOCKS    9
 BLOCK    9 CONNECTS TO BLOCKS   10   11
 BLOCK   10 CONNECTS TO BLOCKS   12
 BLOCK   11 CONNECTS TO BLOCKS   12
 BLOCK   12 CONNECTS TO BLOCKS    5
 BLOCK   13 CONNECTS TO BLOCKS   14
 BLOCK   14 CONNECTS TO BLOCKS   15   16
 BLOCK   15 CONNECTS TO BLOCKS   16
 BLOCK   16 CONNECTS TO BLOCKS    2
 BLOCK   17 CONNECTS TO BLOCKS   18   22
 BLOCK   18 CONNECTS TO BLOCKS   19
 BLOCK   19 CONNECTS TO BLOCKS   20   21
 BLOCK   20 CONNECTS TO BLOCKS   19
 BLOCK   21 CONNECTS TO BLOCKS   22



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   10 TO   22    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   23 TO   26    -   BLOCK    2
 BLOCK    3 CONTAINS LINES   27 TO   31    -   BLOCK    3
 BLOCK    4 CONTAINS LINES   32 TO   34    -   BLOCK    4
 BLOCK    5 CONTAINS LINES   35 TO   38    -   BLOCK    5
 BLOCK    6 CONTAINS LINES   39 TO   43    -   BLOCK    6
 BLOCK    7 CONTAINS LINES   44 TO   47    -   BLOCK    7
 BLOCK    8 CONTAINS LINES   48 TO   50    -   BLOCK    8
 BLOCK    9 CONTAINS LINES   51 TO   54    -   BLOCK    9
 BLOCK   10 CONTAINS LINES   55 TO   58    -   BLOCK   10
 BLOCK   11 CONTAINS LINES   59 TO   61    -   BLOCK   11
 BLOCK   12 CONTAINS LINES   62 TO   63    -   BLOCK   12
 BLOCK   13 CONTAINS LINES   64 TO   64    -   BLOCK   13
 BLOCK   14 CONTAINS LINES   65 TO   68    -   BLOCK   14
 BLOCK   15 CONTAINS LINES   69 TO   71    -   BLOCK   15
 BLOCK   16 CONTAINS LINES   72 TO   73    -   BLOCK   16
 BLOCK   17 CONTAINS LINES   74 TO   77    -   BLOCK   17
 BLOCK   18 CONTAINS LINES   78 TO   80    -   BLOCK   18
 BLOCK   19 CONTAINS LINES   81 TO   84    -   BLOCK   19
 BLOCK   20 CONTAINS LINES   85 TO   88    -   BLOCK   20
 BLOCK   21 CONTAINS LINES   89 TO   89    -   BLOCK   21
 BLOCK   22 CONTAINS LINES   90 TO   90    -   BLOCK   22





 ----- STRUCTURED CODE FOUND -----

 WHILE                                   
                      FORMED OF BLOCKS   19   20   21
       THE FOLLOWING BLOCKS ARE MERGED   19   20

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   18   19
       THE FOLLOWING BLOCKS ARE MERGED   18   19

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   18   21
       THE FOLLOWING BLOCKS ARE MERGED   18   21

 IF THEN                                 
                      FORMED OF BLOCKS   17   18   22
       THE FOLLOWING BLOCKS ARE MERGED   17   18

 IF THEN                                 
                      FORMED OF BLOCKS   14   15   16
       THE FOLLOWING BLOCKS ARE MERGED   14   15

 IF THEN ELSE                            
                      FORMED OF BLOCKS    9   10   11   12
       THE FOLLOWING BLOCKS ARE MERGED    9   10   11

 IF THEN ELSE                            
                      FORMED OF BLOCKS    6    7    8    9
       THE FOLLOWING BLOCKS ARE MERGED    6    7    8





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2
 BLOCK    2 CONNECTS TO BLOCKS    3   17
 BLOCK    3 CONNECTS TO BLOCKS    4   14
 BLOCK    4 CONNECTS TO BLOCKS    5
 BLOCK    5 CONNECTS TO BLOCKS    6   13
 BLOCK    6 CONNECTS TO BLOCKS    9
 BLOCK    9 CONNECTS TO BLOCKS   12
 BLOCK   12 CONNECTS TO BLOCKS    5
 BLOCK   13 CONNECTS TO BLOCKS   14
 BLOCK   14 CONNECTS TO BLOCKS   16
 BLOCK   16 CONNECTS TO BLOCKS    2
 BLOCK   17 CONNECTS TO BLOCKS   22



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   10 TO   22    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   23 TO   26    -   BLOCK    2
 BLOCK    3 CONTAINS LINES   27 TO   31    -   BLOCK    3
 BLOCK    4 CONTAINS LINES   32 TO   34    -   BLOCK    4
 BLOCK    5 CONTAINS LINES   35 TO   38    -   BLOCK    5
 BLOCK    6 CONTAINS LINES   39 TO   50    -  BLOCKS    6 TO    8
 BLOCK    9 CONTAINS LINES   51 TO   61    -  BLOCKS    9 TO   11
 BLOCK   12 CONTAINS LINES   62 TO   63    -   BLOCK   12
 BLOCK   13 CONTAINS LINES   64 TO   64    -   BLOCK   13
 BLOCK   14 CONTAINS LINES   65 TO   71    -  BLOCKS   14 TO   15
 BLOCK   16 CONTAINS LINES   72 TO   73    -   BLOCK   16
 BLOCK   17 CONTAINS LINES   74 TO   89    -  BLOCKS   17 TO   21
 BLOCK   22 CONTAINS LINES   90 TO   90    -   BLOCK   22





 ----- STRUCTURED CODE FOUND -----

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   17   22
       THE FOLLOWING BLOCKS ARE MERGED   17   22

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   14   16
       THE FOLLOWING BLOCKS ARE MERGED   14   16

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    9   12
       THE FOLLOWING BLOCKS ARE MERGED    9   12

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    6    9
       THE FOLLOWING BLOCKS ARE MERGED    6    9

 WHILE                                   
                      FORMED OF BLOCKS    5    6   13
       THE FOLLOWING BLOCKS ARE MERGED    5    6

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    4    5
       THE FOLLOWING BLOCKS ARE MERGED    4    5

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    4   13
       THE FOLLOWING BLOCKS ARE MERGED    4   13

 IF THEN                                 
                      FORMED OF BLOCKS    3    4   14
       THE FOLLOWING BLOCKS ARE MERGED    3    4





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2
 BLOCK    2 CONNECTS TO BLOCKS    3   17
 BLOCK    3 CONNECTS TO BLOCKS   14
 BLOCK   14 CONNECTS TO BLOCKS    2



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   10 TO   22    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   23 TO   26    -   BLOCK    2
 BLOCK    3 CONTAINS LINES   27 TO   64    -  BLOCKS    3 TO   13
 BLOCK   14 CONTAINS LINES   65 TO   73    -  BLOCKS   14 TO   16
 BLOCK   17 CONTAINS LINES   74 TO   90    -  BLOCKS   17 TO   22





 ----- STRUCTURED CODE FOUND -----

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    3   14
       THE FOLLOWING BLOCKS ARE MERGED    3   14

 WHILE                                   
                      FORMED OF BLOCKS    2    3   17
       THE FOLLOWING BLOCKS ARE MERGED    2    3

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1    2
       THE FOLLOWING BLOCKS ARE MERGED    1    2

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1   17
       THE FOLLOWING BLOCKS ARE MERGED    1   17





 STRUCTURE REDUCED TO 1 BLOCK





 ESSENTIAL KNOTS =     0
 ***********************

 ESSENTIAL COMPLEXITY OF MCCABE =    1
 *************************************


 PROCEDURE STRUCTURED
 ********************






 =====================================================================================================================
                  EXECUTABLE     BASIC   AVERAGE   ORDER 1 MAX ORDER                               ESSENTIAL ESSENTIAL
 PROCEDURE             LINES    BLOCKS    LENGTH INTERVALS INTERVALS REDUCIBLE    MCCABE     KNOTS    MCCABE     KNOTS
 =====================================================================================================================

 main                    74        22      3.36         6         3       YES         9         5         1         0

 ---------------------------------------------------------------------------------------------------------------------

 TOTAL FOR PROGRAM       74        22      3.36         6         3       YES         9         5         1         0





 =========================================================
                                           TOTAL MAX DEPTH
 PROCEDURE           ENTRIES     EXITS     LOOPS     LOOPS
 =========================================================

 main                     1         1         3         2

 ---------------------------------------------------------

 TOTAL FOR PROGRAM        1         1         3         2





 THE PROGRAM CONTAINS    1 PROCEDURES


 THE ESSENTIAL MCCABE MEASURE OF 1 INDICATES THAT THE PROGRAM IS WELL STRUCTURED
