 STRUCTURED PROGRAMMING VERIFICATION WILL USE THE FOLLOWING  7 STRUCTURES
 ------------------------------------------------------------------------

 SIMPLE COLLAPSE                         

 REPEAT                                  

 CASE                                    

 WHILE LOOP                              

 IF THEN                                 

 IF THEN ELSE                            

 FOR LOOP                                





                                  *****************************************************
                                  *****************************************************
                                  **                                                 **
                                  **                                                 **
                                  **             COMPLEXITY ANALYSIS FOR             **
                                  **                                                 **
                                  **                                                 **
                                  **                 PROCEDURE *MAIN                 **
                                  **                                                 **
                                  **                                                 **
                                  *****************************************************
                                  *****************************************************





 LIST OF KNOTS
 -------------

 =======================================================
  FROM   TO    FROM   TO     DOWN-DOWN  UP-DOWN    UP-UP
 =======================================================

    32   37      36   40         T
    49   70      69   47                   T
    54   59      58   62         T
    72   76      75   70                   T
    82   87      86   90         T

 -------------------------------------------------------

 TOTAL NUMBER OF KNOTS     =    5

 NUMBER OF DOWN-DOWN KNOTS =    3
 NUMBER OF UP-DOWN KNOTS   =    2
 NUMBER OF UP-UP KNOTS     =    0

 BASIC BLOCK DISPLAY
 -------------------

 =======================================================================================================================
  LINE                                                                                                       BASIC BLOCK
 NUMBER                                                 STATEMENT                                                 NUMBER
 =======================================================================================================================

    23  begin                                                                                                          1
    24    for                                                                                                          1
    25       i := 1 to MAXLINE                                                                                         1
    26    do                                                                                                           1

 -----------------------------------------------------------------------------------------------------------------------

    27     begin                                                                                                       2
    28       writeln ( 'eimaste sto for' ) ;                                                                           2
    29       read ( x ) ;                                                                                              2
    30       if                                                                                                        2
    31          ( x = 1 )                                                                                              2
    32       then                                                                                                      2

 -----------------------------------------------------------------------------------------------------------------------

    33        BEGIN                                                                                                    3
    34          tabstops [ i ] := true                                                                                 3
    35        END                                                                                                      3
    36       else                                                                                                      3

 -----------------------------------------------------------------------------------------------------------------------

    37        BEGIN                                                                                                    4
    38          tabstops [ i ] := false                                                                                4
    39        END                                                                                                      4

 -----------------------------------------------------------------------------------------------------------------------

    40     end ;                                                                                                       5

 -----------------------------------------------------------------------------------------------------------------------

    41    writeln ( 'eimaste eksw apo to for' ) ;                                                                      6
    42    col := 1 ;                                                                                                   6

 -----------------------------------------------------------------------------------------------------------------------

    43    repeat                                                                                                       7
    44       writeln ( 'eimaste mesa sto repeat' ) ;                                                                   7
    45       newcol := col ;                                                                                           7
    46       read ( c ) ;                                                                                              7

 -----------------------------------------------------------------------------------------------------------------------

    47       while                                                                                                     8
    48          ( c = BLANK )                                                                                          8
    49       do                                                                                                        8

 -----------------------------------------------------------------------------------------------------------------------

    50        begin                                                                                                    9
    51          newcol := newcol + 1 ;                                                                                 9
    52          if                                                                                                     9
    53             ( newcol > MAXLINE )                                                                                9
    54          then                                                                                                   9

 -----------------------------------------------------------------------------------------------------------------------

    55           BEGIN                                                                                                10
    56             tabpos := true                                                                                     10
    57           END                                                                                                  10
    58          else                                                                                                  10

 -----------------------------------------------------------------------------------------------------------------------

    59           BEGIN                                                                                                11
    60             tabpos := tabstops [ newcol ]                                                                      11
    61           END ;                                                                                                11

 -----------------------------------------------------------------------------------------------------------------------

    62          if                                                                                                    12
    63             ( tabpos )                                                                                         12
    64          then                                                                                                  12

 -----------------------------------------------------------------------------------------------------------------------

    65           begin                                                                                                13
    66             col := newcol                                                                                      13
    67           end ;                                                                                                13

 -----------------------------------------------------------------------------------------------------------------------

    68          read ( c )                                                                                            14
    69        end ;                                                                                                   14

 -----------------------------------------------------------------------------------------------------------------------

    70       while                                                                                                    15
    71          ( col < newcol )                                                                                      15
    72       do                                                                                                       15

 -----------------------------------------------------------------------------------------------------------------------

    73        begin                                                                                                   16
    74          col := col + 1                                                                                        16
    75        end ;                                                                                                   16

 -----------------------------------------------------------------------------------------------------------------------

    76       if                                                                                                       17
    77          ( c <> ENDFILE )                                                                                      17
    78       then                                                                                                     17

 -----------------------------------------------------------------------------------------------------------------------

    79        begin                                                                                                   18
    80          if                                                                                                    18
    81             ( c = NEWLINE )                                                                                    18
    82          then                                                                                                  18

 -----------------------------------------------------------------------------------------------------------------------

    83           BEGIN                                                                                                19
    84             col := 1                                                                                           19
    85           END                                                                                                  19
    86          else                                                                                                  19

 -----------------------------------------------------------------------------------------------------------------------

    87           BEGIN                                                                                                20
    88             col := col + 1                                                                                     20
    89           END                                                                                                  20

 -----------------------------------------------------------------------------------------------------------------------

    90        end ;                                                                                                   21

 -----------------------------------------------------------------------------------------------------------------------

    91    until                                                                                                       22
    92       ( c = ENDFILE )                                                                                          22

 -----------------------------------------------------------------------------------------------------------------------

    93  end .                                                                                                         23





 AVERAGE LENGTH OF BASIC BLOCK =  3.09 EXECUTABLE LINES


 PROCEDURE ENTRY AT BASIC BLOCK    1

 PROCEDURE EXIT  AT BASIC BLOCK   23





 KNOTS
 -----

 ===============================================================================
  FROM       TO        FROM       TO          FROM       TO        FROM       TO
 BLOCK    BLOCK       BLOCK    BLOCK          LINE     LINE        LINE     LINE
 ===============================================================================

     2        4           3        5            32       37          36       40
     8       15          14        8            49       70          69       47
     9       11          10       12            54       59          58       62
    15       17          16       15            72       76          75       70
    18       20          19       21            82       87          86       90





 NUMBER OF BLOCK CONNECTIONS  =   32
 NUMBER OF BLOCKS             =   23

 COMPLEXITY MEASURE OF MCCABE =   11
 ***********************************

 NUMBER OF KNOTS              =    5
 ***********************************

 INTERVAL ANALYSIS
 -----------------





 INTERVALS OF ORDER    1
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1
 EXIT BLOCK         1


 HEADER BLOCK       2 ( HEAD OF LOOP )
 INTERVAL BLOCKS    2    3    4    5
 EXIT BLOCK         5


 HEADER BLOCK       6
 INTERVAL BLOCKS    6
 EXIT BLOCK         6


 HEADER BLOCK       7 ( HEAD OF LOOP )
 INTERVAL BLOCKS    7
 EXIT BLOCK         7


 HEADER BLOCK       8 ( HEAD OF LOOP )
 INTERVAL BLOCKS    8    9   10   11   12   13   14
 EXIT BLOCK         8


 HEADER BLOCK      15 ( HEAD OF LOOP )
 INTERVAL BLOCKS   15   16   17   18   19   20   21   22   23
 EXIT BLOCK(S)     22   23


 NUMBER OF INTERVALS =    6
 AVERAGE LENGTH OF INTERVAL =  3.83 BLOCKS





 INTERVALS OF ORDER    2
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1    2    6
 EXIT BLOCK         6


 HEADER BLOCK       7 ( HEAD OF LOOP )
 INTERVAL BLOCKS    7    8   15
 NO EXIT NODES


 NUMBER OF INTERVALS =    2
 AVERAGE LENGTH OF INTERVAL =  3.00 BLOCKS





 INTERVALS OF ORDER    3
 -----------------------



 HEADER BLOCK       1
 INTERVAL BLOCKS    1    7
 EXIT BLOCK         7


 NUMBER OF INTERVALS =    1
 AVERAGE LENGTH OF INTERVAL =  2.00 BLOCKS


 PROCEDURE REDUCIBLE IN THE INTERVAL SENSE
 *****************************************

 STRUCTURED PROGRAMMING VERIFICATION
 -----------------------------------





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2    6
 BLOCK    2 CONNECTS TO BLOCKS    3    4
 BLOCK    3 CONNECTS TO BLOCKS    5
 BLOCK    4 CONNECTS TO BLOCKS    5
 BLOCK    5 CONNECTS TO BLOCKS    2    6
 BLOCK    6 CONNECTS TO BLOCKS    7
 BLOCK    7 CONNECTS TO BLOCKS    8
 BLOCK    8 CONNECTS TO BLOCKS    9   15
 BLOCK    9 CONNECTS TO BLOCKS   10   11
 BLOCK   10 CONNECTS TO BLOCKS   12
 BLOCK   11 CONNECTS TO BLOCKS   12
 BLOCK   12 CONNECTS TO BLOCKS   13   14
 BLOCK   13 CONNECTS TO BLOCKS   14
 BLOCK   14 CONNECTS TO BLOCKS    8
 BLOCK   15 CONNECTS TO BLOCKS   16   17
 BLOCK   16 CONNECTS TO BLOCKS   15
 BLOCK   17 CONNECTS TO BLOCKS   18   22
 BLOCK   18 CONNECTS TO BLOCKS   19   20
 BLOCK   19 CONNECTS TO BLOCKS   21
 BLOCK   20 CONNECTS TO BLOCKS   21
 BLOCK   21 CONNECTS TO BLOCKS   22
 BLOCK   22 CONNECTS TO BLOCKS    7   23



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   23 TO   26    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   27 TO   32    -   BLOCK    2
 BLOCK    3 CONTAINS LINES   33 TO   36    -   BLOCK    3
 BLOCK    4 CONTAINS LINES   37 TO   39    -   BLOCK    4
 BLOCK    5 CONTAINS LINES   40 TO   40    -   BLOCK    5
 BLOCK    6 CONTAINS LINES   41 TO   42    -   BLOCK    6
 BLOCK    7 CONTAINS LINES   43 TO   46    -   BLOCK    7
 BLOCK    8 CONTAINS LINES   47 TO   49    -   BLOCK    8
 BLOCK    9 CONTAINS LINES   50 TO   54    -   BLOCK    9
 BLOCK   10 CONTAINS LINES   55 TO   58    -   BLOCK   10
 BLOCK   11 CONTAINS LINES   59 TO   61    -   BLOCK   11
 BLOCK   12 CONTAINS LINES   62 TO   64    -   BLOCK   12
 BLOCK   13 CONTAINS LINES   65 TO   67    -   BLOCK   13
 BLOCK   14 CONTAINS LINES   68 TO   69    -   BLOCK   14
 BLOCK   15 CONTAINS LINES   70 TO   72    -   BLOCK   15
 BLOCK   16 CONTAINS LINES   73 TO   75    -   BLOCK   16
 BLOCK   17 CONTAINS LINES   76 TO   78    -   BLOCK   17
 BLOCK   18 CONTAINS LINES   79 TO   82    -   BLOCK   18
 BLOCK   19 CONTAINS LINES   83 TO   86    -   BLOCK   19
 BLOCK   20 CONTAINS LINES   87 TO   89    -   BLOCK   20
 BLOCK   21 CONTAINS LINES   90 TO   90    -   BLOCK   21
 BLOCK   22 CONTAINS LINES   91 TO   92    -   BLOCK   22
 BLOCK   23 CONTAINS LINES   93 TO   93    -   BLOCK   23





 ----- STRUCTURED CODE FOUND -----

 IF THEN ELSE                            
                      FORMED OF BLOCKS   18   19   20   21
       THE FOLLOWING BLOCKS ARE MERGED   18   19   20

 WHILE LOOP                              
                      FORMED OF BLOCKS   15   16   17
       THE FOLLOWING BLOCKS ARE MERGED   15   16

 IF THEN                                 
                      FORMED OF BLOCKS   12   13   14
       THE FOLLOWING BLOCKS ARE MERGED   12   13

 IF THEN ELSE                            
                      FORMED OF BLOCKS    9   10   11   12
       THE FOLLOWING BLOCKS ARE MERGED    9   10   11

 IF THEN ELSE                            
                      FORMED OF BLOCKS    2    3    4    5
       THE FOLLOWING BLOCKS ARE MERGED    2    3    4





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    2    6
 BLOCK    2 CONNECTS TO BLOCKS    5
 BLOCK    5 CONNECTS TO BLOCKS    2    6
 BLOCK    6 CONNECTS TO BLOCKS    7
 BLOCK    7 CONNECTS TO BLOCKS    8
 BLOCK    8 CONNECTS TO BLOCKS    9   15
 BLOCK    9 CONNECTS TO BLOCKS   12
 BLOCK   12 CONNECTS TO BLOCKS   14
 BLOCK   14 CONNECTS TO BLOCKS    8
 BLOCK   15 CONNECTS TO BLOCKS   17
 BLOCK   17 CONNECTS TO BLOCKS   18   22
 BLOCK   18 CONNECTS TO BLOCKS   21
 BLOCK   21 CONNECTS TO BLOCKS   22
 BLOCK   22 CONNECTS TO BLOCKS    7   23



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   23 TO   26    -   BLOCK    1
 BLOCK    2 CONTAINS LINES   27 TO   39    -  BLOCKS    2 TO    4
 BLOCK    5 CONTAINS LINES   40 TO   40    -   BLOCK    5
 BLOCK    6 CONTAINS LINES   41 TO   42    -   BLOCK    6
 BLOCK    7 CONTAINS LINES   43 TO   46    -   BLOCK    7
 BLOCK    8 CONTAINS LINES   47 TO   49    -   BLOCK    8
 BLOCK    9 CONTAINS LINES   50 TO   61    -  BLOCKS    9 TO   11
 BLOCK   12 CONTAINS LINES   62 TO   67    -  BLOCKS   12 TO   13
 BLOCK   14 CONTAINS LINES   68 TO   69    -   BLOCK   14
 BLOCK   15 CONTAINS LINES   70 TO   75    -  BLOCKS   15 TO   16
 BLOCK   17 CONTAINS LINES   76 TO   78    -   BLOCK   17
 BLOCK   18 CONTAINS LINES   79 TO   89    -  BLOCKS   18 TO   20
 BLOCK   21 CONTAINS LINES   90 TO   90    -   BLOCK   21
 BLOCK   22 CONTAINS LINES   91 TO   92    -   BLOCK   22
 BLOCK   23 CONTAINS LINES   93 TO   93    -   BLOCK   23





 ----- STRUCTURED CODE FOUND -----

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   18   21
       THE FOLLOWING BLOCKS ARE MERGED   18   21

 IF THEN                                 
                      FORMED OF BLOCKS   17   18   22
       THE FOLLOWING BLOCKS ARE MERGED   17   18

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   15   17
       THE FOLLOWING BLOCKS ARE MERGED   15   17

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   15   22
       THE FOLLOWING BLOCKS ARE MERGED   15   22

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS   12   14
       THE FOLLOWING BLOCKS ARE MERGED   12   14

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    9   12
       THE FOLLOWING BLOCKS ARE MERGED    9   12

 WHILE LOOP                              
                      FORMED OF BLOCKS    8    9   15
       THE FOLLOWING BLOCKS ARE MERGED    8    9

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    7    8
       THE FOLLOWING BLOCKS ARE MERGED    7    8

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    7   15
       THE FOLLOWING BLOCKS ARE MERGED    7   15

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    2    5
       THE FOLLOWING BLOCKS ARE MERGED    2    5

 FOR LOOP                                
                      FORMED OF BLOCKS    1    2    6
       THE FOLLOWING BLOCKS ARE MERGED    1    2





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    6
 BLOCK    6 CONNECTS TO BLOCKS    7
 BLOCK    7 CONNECTS TO BLOCKS    7   23



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   23 TO   40    -  BLOCKS    1 TO    5
 BLOCK    6 CONTAINS LINES   41 TO   42    -   BLOCK    6
 BLOCK    7 CONTAINS LINES   43 TO   92    -  BLOCKS    7 TO   22
 BLOCK   23 CONTAINS LINES   93 TO   93    -   BLOCK   23





 ----- STRUCTURED CODE FOUND -----

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1    6
       THE FOLLOWING BLOCKS ARE MERGED    1    6





 ----- CONNECTION DISPLAY -----

 BLOCK    1 CONNECTS TO BLOCKS    7
 BLOCK    7 CONNECTS TO BLOCKS    7   23



 THE LINES OF CODE CONTAINED IN EACH BLOCK ARE

 BLOCK    1 CONTAINS LINES   23 TO   42    -  BLOCKS    1 TO    6
 BLOCK    7 CONTAINS LINES   43 TO   92    -  BLOCKS    7 TO   22
 BLOCK   23 CONTAINS LINES   93 TO   93    -   BLOCK   23





 ----- STRUCTURED CODE FOUND -----

 REPEAT                                  
                      FORMED OF BLOCKS    7

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1    7
       THE FOLLOWING BLOCKS ARE MERGED    1    7

 SIMPLE COLLAPSE                         
                      FORMED OF BLOCKS    1   23
       THE FOLLOWING BLOCKS ARE MERGED    1   23





 STRUCTURE REDUCED TO 1 BLOCK





 ESSENTIAL KNOTS =    0
 **********************

 ESSENTIAL COMPLEXITY OF MCCABE =    1
 *************************************


 PROCEDURE STRUCTURED
 ********************

 =====================================================================================================================
                  EXECUTABLE     BASIC   AVERAGE   ORDER 1 MAX ORDER                               ESSENTIAL ESSENTIAL
 PROCEDURE             LINES    BLOCKS    LENGTH INTERVALS INTERVALS REDUCIBLE    MCCABE     KNOTS    MCCABE     KNOTS
 =====================================================================================================================

 *MAIN                   71        23      3.09         6         3       YES        11         5         1         0

 ---------------------------------------------------------------------------------------------------------------------

 TOTAL FOR PROGRAM       71        23      3.09         6         3       YES        11         5         1         0





 =========================================================
                                           TOTAL MAX DEPTH
 PROCEDURE           ENTRIES     EXITS     LOOPS     LOOPS
 =========================================================

 *MAIN                    1         1         4         2

 ---------------------------------------------------------

 TOTAL FOR PROGRAM        1         1         4         2





 THE PROGRAM CONTAINS    1 PROCEDURES


 THE ESSENTIAL MCCABE MEASURE OF 1 INDICATES THAT THE PROGRAM IS WELL STRUCTURED
